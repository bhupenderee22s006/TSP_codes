#this is the MNIST code for FSS using MMD distance metric

def man(a,b):
    return abs(a-b)
import numpy as np
import math
import sys

def kernel(x,y):
    x = np.array(x)
    y = np.array(y)
    #print(np.linalg.norm(x-y))
    return math.exp((-np.linalg.norm(x-y)**2)/(2*1000000))
# def computeMMD(x,y,N):
#     g = [[kernel(x[:,i], x[:,j]) + kernel(y[:,i],y[:,j]) - (2*kernel(x[:,i], y[:,j])) for j in range(N)] for i in range(N)]
#     #print(kernel(x[:,1], y[:,2]))
#     print('MMD function done')
#     return math.sqrt((sum(map(sum,g)) / N**2))

def computeMMD(x, y, N,i,j):
    # Convert x and y to numpy arrays
    x = np.array(x)
    y = np.array(y)
    x = x[:, :N]
    y = y[:, :N]


    # Kxx = np.exp(-np.linalg.norm(x[:, :, None]-x[:, None, :], axis=0)**2/(2*1000000))
    # Kyy = np.exp(-np.linalg.norm(y[:, :, None]-y[:, None, :], axis=0)**2/(2*1000000))
    # Kxy = np.exp(-np.linalg.norm(x[:, :, None]-y[:, None, :], axis=0)**2/(2*1000000))

    
    # Compute kernel matrices using broadcasting
    # Kxx = kernel(x[:, None], x[None, :])  # Kernel matrix for x with itself
    # Kyy = kernel(y[:, None], y[None, :])  # Kernel matrix for y with itself
    # Kxy = kernel(x[:, None], y[None, :])  # Kernel matrix for x with y
    #print('MMD function done')

    # Calculate the MMD using vectorized operations
    # MMD_squared = (np.sum(Kxx) + np.sum(Kyy) - 2 * np.sum(Kxy)) / (N**2)
    MMD_squared = (np.sum(np.exp(-np.linalg.norm(x[:, :, None]-x[:, None, :], axis=0)**2/(2))) + 
                    np.sum(np.exp(-np.linalg.norm(y[:, :, None]-y[:, None, :], axis=0)**2/(2))) - 
                    2 * np.sum(np.exp(-np.linalg.norm(x[:, :, None]-y[:, None, :], axis=0)**2/(2)))) / (N**2)
    #print(f'MMD_squared = {MMD_squared}')
    MMD_squared_abs = abs(MMD_squared)
    # print(np.linalg.norm(x[:, :, None]-x[:, None, :], axis=0)**2, np.linalg.norm(y[:, :, None]-y[:, None, :], axis=0)**2, np.linalg.norm(x[:, :, None]-y[:, None, :], axis=0)**2)
    # print(i,j,MMD_squared)
    return np.sqrt(MMD_squared_abs)

#lst = [[0,10,6,5,9],[10,0,8,7,2],[6,8,0,1,4],[5,7,1,0,3],[9,2,4,3,0]]
import random
S = 50      # total number of sequences
M = 5      # number of sequences per cluster
K = 10      # number of clusters
means = [i for i in range(K) for j in range(M)]

correct = [[(M*i)+j for j in range(M)]for i in range(K)]
Nvec = [30,32,34,36,38,40,42]  # Number of elements in each stream
print(correct)
import pickle
with open('MNIST_50_arms_10_clusters_norm1.pkl', 'rb') as pkl_file:
    y_all = pickle.load(pkl_file)

def wrong_streams_ratio(C_sort, correct, S=50):
    K = len(correct)
    # S = 50 # hard coded
    num_wrong_streams = 0
    for k in range(K):
        wrong_streams_k = np.setdiff1d(np.array(C_sort[k]), np.array(correct[k]))
        num_wrong_streams = num_wrong_streams + len(wrong_streams_k)
    return num_wrong_streams/S

col_indices = np.random.choice(1000, 200, replace=False)
print(col_indices)

Pe = np.zeros(len(Nvec))
Pe2 = np.zeros(len(Nvec))
lnPe=np.zeros(len(Nvec))
lnPe2 = np.zeros(len(Nvec))

for ii in range(len(Nvec)):
    N = Nvec[ii]
    print(f'N = {N}')
    total = 0
    error = 0
    pe2_sum = 0 # to sum wrong stream ratio over different shuffle
    

    while total<10000:

        col_indices = np.random.choice(1000, N, replace=False) # hardcoded
        y = {}
        for s in range(S):
            y[s] = y_all[s][:, col_indices]

        clusters = [[i] for i in range(S)]
        total += 1
        lst = [[] for i in range(M)]

        # a = [np.random.normal(means[i],1,(1,N)) for i in range(M)]
        # y = np.asarray(a)
        #y = np.vstack(y)
        lst = [[computeMMD(y[i],y[j],N,i,j) for j in range(i+1)] for i in range(S)]
        # print('All MMDs computed')
        # print('MMD matrix:',lst)

        for i in range(S):
            for j in range(S):
                if i<j:
                    lst[i].append(lst[j][i])
        #print(lst)
        n = 0
        while len(clusters)>K:

            ####    FIND MINIMUM    ####
        
            #mi = sys.float_info.max
            mi = 100
            for i in range(len(lst)):
                for j in range(i+1):
                    if i != j:
                        if lst[i][j] < mi:
                            mi = lst[i][j]
                            a,b = [i,j]
            # print("the values a and b are ",a,b)
            clusters[b].extend(clusters[a])
            del clusters[a]
            # print(clusters)

            ####    MERGE ROWS  ####

            for i in range(len(lst[b])):        #merge rows 'a' and 'b'
                if min(lst[a][i],lst[b][i]) != 0:
                    lst[b][i] = min(lst[a][i],lst[b][i])
            del lst[a]

            ####    UPDATE ROWS     ####

            for i in range(len(lst)):       #update all other rows
                if i!=b:
                    lst[i][b] = min(lst[i][a],lst[i][b])
                del lst[i][a]   #new statement

            #print('dist matrix', lst)
            #print('dist matrix 2', dist)
            # print('clusters',clusters)
            n = n+1

        clusters.sort()
        C_sort = []
        for x in clusters:
            x.sort()
            C_sort.append(x)

        # print(C_sort)
        #print(centers)
        pe2_sum = pe2_sum + wrong_streams_ratio(C_sort, correct, S)

        if correct != C_sort:
            error = error + 1
            #print('L')
        #else:
            #print('W')
            print('sum_pe1, sum_pe2, total', error,pe2_sum, total)
            # print(C_sort)

    Pe2[ii] = pe2_sum/total
    Pe[ii] = error/total
    lnPe[ii] = np.log(Pe[ii])
    lnPe2[ii] = np.log(Pe2[ii])
    print(f'Final Results for N = {N} ---------------------------------------------')
    print('total, pe1, lnpe1, pe2, lnpe2', total,Pe[ii],lnPe[ii], Pe2[ii], lnPe2[ii])
    print('-------------------------------------------------------------')
    



